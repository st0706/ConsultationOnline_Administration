CREATE TABLE IF NOT EXISTS "public"."Appointment" (
    "id" "text" NOT NULL,
    "status" "text" NOT NULL,
    "appointmentType" "jsonb",
    "priority" "jsonb",
    "description" "text",
    "resourceType" "text" DEFAULT 'Appointment'::"text" NOT NULL,
    "start" bigint,
    "end" bigint,
    "subject" "jsonb",
    "cancellationDate" bigint,
    "specialty" "jsonb",
    "reason" "jsonb",
    "virtualService" "jsonb",
    "supportingInformation" "jsonb",
    "created" bigint,
    "note" "jsonb",
    "participant" "jsonb"
);

-- Custom types
create type public.app_permission as enum ('appointment.delete', 'appointment.create', 'appointment.update','appointment.view');
create type public.app_role as enum ('appointment.admin','appointment.approve_level_1','appointment.approve_level_2','appointment.moderator','appointment.participant');
create policy "Allow delete access" on public."Appointment" for delete using ( (SELECT authorize('appointment.delete')) );
create policy "Allow create access" on public."Appointment" for insert with check ( (SELECT authorize('appointment.create')) );
create policy "Allow  update access" on public."Appointment" for update to authenticated
with check ( (SELECT authorize('appointment.update')) ); -- checks if the new row complies with the policy expression
create policy "Allow view access" on public."Appointment" for select using ( (SELECT authorize('appointment.view')) );
-- USER ROLES
create table public.user_roles (
  id        bigint generated by default as identity primary key,
  user_id   uuid references public.profiles on delete cascade not null,
  role      app_role not null,
  unique (user_id, role)
);
comment on table public.user_roles is 'Application roles for each user.';
GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE user_roles TO public;
-- ROLE PERMISSIONS
create table public.role_permissions (
  id           bigint generated by default as identity primary key,
  role         app_role not null,
  permission   app_permission not null,
  unique (role, permission)
);
comment on table public.role_permissions is 'Application permissions for each role.';
CREATE TYPE "public"."Gender" AS ENUM (
    'male',
    'female',
    'other',
    'unknown'
);

ALTER TYPE "public"."Gender" OWNER TO "postgres";

CREATE TYPE "public"."Status" AS ENUM (
    'active',
    'suspend',
    'inactive'
);

ALTER TYPE "public"."Status" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."CalendarEvent" (
    "id" "text" NOT NULL,
    "nameEvent" "text" NOT NULL,
    "periodStart" bigint NOT NULL,
    "periodEnd" bigint NOT NULL,
    "description" "text"
);

ALTER TABLE "public"."CalendarEvent" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Cities" (
    "id" "text" NOT NULL,
    "cityCode" "text" NOT NULL,
    "cityName" "text" NOT NULL
);

ALTER TABLE "public"."Cities" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Districts" (
    "id" "text" NOT NULL,
    "districtCode" "text" NOT NULL,
    "districtName" "text" NOT NULL,
    "cityId" "text" NOT NULL,
    "cityName" "text" NOT NULL
);

ALTER TABLE "public"."Districts" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Organization" (
    "id" "text" NOT NULL,
    "identifier" "jsonb",
    "active" boolean,
    "type" "jsonb",
    "name" "text",
    "alias" "text"[],
    "description" "text",
    "contact" "jsonb",
    "partOfId" "text",
    "endpoint" "jsonb",
    "qualification" "jsonb",
    "logo" "text",
    "website" "text",
    "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "updatedAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "unitId" "text" NOT NULL
);

ALTER TABLE "public"."Organization" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."OrganizationToStaff" (
    "organizationId" "text" NOT NULL,
    "staffId" "text" NOT NULL
);

ALTER TABLE "public"."OrganizationToStaff" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Patient" (
    "resourceType" "text" DEFAULT 'Patient'::"text" NOT NULL,
    "id" "text" NOT NULL,
    "parentId" "text",
    "identifier" "jsonb",
    "active" boolean DEFAULT true,
    "name" "jsonb",
    "telecom" "jsonb",
    "gender" "public"."Gender",
    "birthDate" bigint,
    "multipleBirthBoolean" boolean DEFAULT false NOT NULL,
    "multipleBirthInterger" integer,
    "deceasedBoolean" boolean DEFAULT false NOT NULL,
    "deceasedDateTime" bigint,
    "address" "jsonb",
    "managingOrganization" "jsonb",
    "maritalStatus" "jsonb",
    "photo" "jsonb",
    "communication" "jsonb",
    "link" "jsonb",
    "contact" "jsonb"
);

ALTER TABLE "public"."Patient" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Practitioner" (
    "id" "uuid" NOT NULL,
    "identifier" "jsonb",
    "active" boolean DEFAULT true,
    "name" "jsonb",
    "telecom" "jsonb",
    "gender" "public"."Gender" NOT NULL,
    "birthDate" bigint NOT NULL,
    "deceasedBoolean" boolean DEFAULT false NOT NULL,
    "deceasedDateTime" bigint,
    "address" "jsonb",
    "photo" "jsonb",
    "qualification" "jsonb",
    "communication" "jsonb",
    "link" "jsonb",
    "userId" "uuid"
);

ALTER TABLE "public"."Practitioner" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Staff" (
    "id" "uuid" NOT NULL,
    "staffId" "text" NOT NULL,
    "ethnicMinority" "text" NOT NULL,
    "nationality" "text" NOT NULL,
    "religion" "text",
    "culturalLevel" "text" NOT NULL,
    "dojCYU" bigint,
    "dojCPV" bigint,
    "officialDojCPV" bigint,
    "habit" "text"
);

ALTER TABLE "public"."Staff" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."Wards" (
    "id" "text" NOT NULL,
    "wardCode" "text" NOT NULL,
    "wardName" "text" NOT NULL,
    "cityId" "text" NOT NULL,
    "cityName" "text" NOT NULL,
    "districtId" "text" NOT NULL,
    "districtName" "text" NOT NULL
);

ALTER TABLE "public"."Wards" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "name" "text",
    "image" "text",
    "email" "text"
);

ALTER TABLE ONLY "public"."Appointment"
    ADD CONSTRAINT "Appointment_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."CalendarEvent"
    ADD CONSTRAINT "CalendarEvent_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Cities"
    ADD CONSTRAINT "Cities_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Districts"
    ADD CONSTRAINT "Districts_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."OrganizationToStaff"
    ADD CONSTRAINT "OrganizationToStaff_pkey" PRIMARY KEY ("staffId", "organizationId");

ALTER TABLE ONLY "public"."Organization"
    ADD CONSTRAINT "Organization_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Patient"
    ADD CONSTRAINT "Patient_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Practitioner"
    ADD CONSTRAINT "Practitioner_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Practitioner"
    ADD CONSTRAINT "Practitioner_userId_key" UNIQUE ("userId");

ALTER TABLE ONLY "public"."Staff"
    ADD CONSTRAINT "Staff_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."Wards"
    ADD CONSTRAINT "Wards_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profile_pkey" PRIMARY KEY ("id");

CREATE UNIQUE INDEX "Cities_cityCode_key" ON "public"."Cities" USING "btree" ("cityCode");

CREATE UNIQUE INDEX "Districts_districtCode_key" ON "public"."Districts" USING "btree" ("districtCode");

CREATE UNIQUE INDEX "Organization_unitId_key" ON "public"."Organization" USING "btree" ("unitId");

CREATE UNIQUE INDEX "Staff_staffID_key" ON "public"."Staff" USING "btree" ("staffId");

CREATE UNIQUE INDEX "Wards_wardCode_districtId_key" ON "public"."Wards" USING "btree" ("wardCode", "districtId");

ALTER TABLE ONLY "public"."Districts"
    ADD CONSTRAINT "Districts_cityId_fkey" FOREIGN KEY ("cityId") REFERENCES "public"."Cities"("cityCode") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."OrganizationToStaff"
    ADD CONSTRAINT "OrganizationToStaff_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "public"."Organization"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."OrganizationToStaff"
    ADD CONSTRAINT "OrganizationToStaff_staffId_fkey" FOREIGN KEY ("staffId") REFERENCES "public"."Staff"("staffId") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Patient"
    ADD CONSTRAINT "Patient_parentId_fkey" FOREIGN KEY ("parentId") REFERENCES "public"."Patient"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Practitioner"
    ADD CONSTRAINT "Practitioner_userId_fkey" FOREIGN KEY ("userId") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Staff"
    ADD CONSTRAINT "Staff_id_fkey" FOREIGN KEY ("id") REFERENCES "public"."Practitioner"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Wards"
    ADD CONSTRAINT "Wards_cityId_fkey" FOREIGN KEY ("cityId") REFERENCES "public"."Cities"("cityCode") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."Wards"
    ADD CONSTRAINT "Wards_districtId_fkey" FOREIGN KEY ("districtId") REFERENCES "public"."Districts"("districtCode") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE "public"."Appointment" TO "postgres";
GRANT ALL ON TABLE "public"."Appointment" TO "anon";
GRANT ALL ON TABLE "public"."Appointment" TO "authenticated";
GRANT ALL ON TABLE "public"."Appointment" TO "service_role";

GRANT ALL ON TABLE "public"."CalendarEvent" TO "anon";
GRANT ALL ON TABLE "public"."CalendarEvent" TO "authenticated";
GRANT ALL ON TABLE "public"."CalendarEvent" TO "service_role";

GRANT ALL ON TABLE "public"."Cities" TO "anon";
GRANT ALL ON TABLE "public"."Cities" TO "authenticated";
GRANT ALL ON TABLE "public"."Cities" TO "service_role";

GRANT ALL ON TABLE "public"."Districts" TO "anon";
GRANT ALL ON TABLE "public"."Districts" TO "authenticated";
GRANT ALL ON TABLE "public"."Districts" TO "service_role";

GRANT ALL ON TABLE "public"."Organization" TO "anon";
GRANT ALL ON TABLE "public"."Organization" TO "authenticated";
GRANT ALL ON TABLE "public"."Organization" TO "service_role";

GRANT ALL ON TABLE "public"."OrganizationToStaff" TO "anon";
GRANT ALL ON TABLE "public"."OrganizationToStaff" TO "authenticated";
GRANT ALL ON TABLE "public"."OrganizationToStaff" TO "service_role";

GRANT ALL ON TABLE "public"."Patient" TO "anon";
GRANT ALL ON TABLE "public"."Patient" TO "authenticated";
GRANT ALL ON TABLE "public"."Patient" TO "service_role";

GRANT ALL ON TABLE "public"."Practitioner" TO "anon";
GRANT ALL ON TABLE "public"."Practitioner" TO "authenticated";
GRANT ALL ON TABLE "public"."Practitioner" TO "service_role";

GRANT ALL ON TABLE "public"."Staff" TO "anon";
GRANT ALL ON TABLE "public"."Staff" TO "authenticated";
GRANT ALL ON TABLE "public"."Staff" TO "service_role";

GRANT ALL ON TABLE "public"."Wards" TO "anon";
GRANT ALL ON TABLE "public"."Wards" TO "authenticated";
GRANT ALL ON TABLE "public"."Wards" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "postgres";
GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
